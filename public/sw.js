var M=Object.defineProperty;var x=(s,e,t)=>e in s?M(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var w=(s,e,t)=>x(s,typeof e!="symbol"?e+"":e,t);try{self["workbox:core:7.2.0"]&&_()}catch{}const q=(s,...e)=>{let t=s;return e.length>0&&(t+=` :: ${JSON.stringify(e)}`),t},v=q;class d extends Error{constructor(e,t){const r=v(e,t);super(r),this.name=e,this.details=t}}const L=new Set,f={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},C=s=>[f.prefix,s,f.suffix].filter(e=>e&&e.length>0).join("-"),D=s=>{for(const e of Object.keys(f))s(e)},H={updateDetails:s=>{D(e=>{typeof s[e]=="string"&&(f[e]=s[e])})},getGoogleAnalyticsName:s=>s||C(f.googleAnalytics),getPrecacheName:s=>s||C(f.precache),getPrefix:()=>f.prefix,getRuntimeName:s=>s||C(f.runtime),getSuffix:()=>f.suffix};function R(s,e){const t=new URL(s);for(const r of e)t.searchParams.delete(r);return t.href}async function U(s,e,t,r){const a=R(e.url,t);if(e.url===a)return s.match(e,r);const c=Object.assign(Object.assign({},r),{ignoreSearch:!0}),n=await s.keys(e,c);for(const o of n){const l=R(o.url,t);if(a===l)return s.match(o,r)}}class A{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}async function T(){for(const s of L)await s()}const P=s=>new URL(String(s),location.href).href.replace(new RegExp(`^${location.origin}`),"");function S(s){return new Promise(e=>setTimeout(e,s))}function F(){self.addEventListener("activate",()=>self.clients.claim())}try{self["workbox:routing:7.2.0"]&&_()}catch{}const W="GET",E=s=>s&&typeof s=="object"?s:{handle:s};class K{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,r=this.handleRequest({request:t,event:e});r&&e.respondWith(r)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data,r=Promise.all(t.urlsToCache.map(a=>{typeof a=="string"&&(a=[a]);const c=new Request(...a);return this.handleRequest({request:c,event:e})}));e.waitUntil(r),e.ports&&e.ports[0]&&r.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){const r=new URL(e.url,location.href);if(!r.protocol.startsWith("http"))return;const a=r.origin===location.origin,{params:c,route:n}=this.findMatchingRoute({event:t,request:e,sameOrigin:a,url:r});let o=n&&n.handler;const l=e.method;if(!o&&this._defaultHandlerMap.has(l)&&(o=this._defaultHandlerMap.get(l)),!o)return;let h;try{h=o.handle({url:r,request:e,event:t,params:c})}catch(i){h=Promise.reject(i)}const u=n&&n.catchHandler;return h instanceof Promise&&(this._catchHandler||u)&&(h=h.catch(async i=>{if(u)try{return await u.handle({url:r,request:e,event:t,params:c})}catch(y){y instanceof Error&&(i=y)}if(this._catchHandler)return this._catchHandler.handle({url:r,request:e,event:t});throw i})),h}findMatchingRoute({url:e,sameOrigin:t,request:r,event:a}){const c=this._routes.get(r.method)||[];for(const n of c){let o;const l=n.match({url:e,sameOrigin:t,request:r,event:a});if(l)return o=l,(Array.isArray(o)&&o.length===0||l.constructor===Object&&Object.keys(l).length===0||typeof l=="boolean")&&(o=void 0),{route:n,params:o}}return{}}setDefaultHandler(e,t=W){this._defaultHandlerMap.set(t,E(e))}setCatchHandler(e){this._catchHandler=E(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new d("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new d("unregister-route-route-not-registered")}}let p;const N=()=>(p||(p=new K,p.addFetchListener(),p.addCacheListener()),p);function $(s){N().setCatchHandler(s)}function I(s){N().setDefaultHandler(s)}try{self["workbox:strategies:7.2.0"]&&_()}catch{}function g(s){return typeof s=="string"?new Request(s):s}class V{constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new A,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const r of this._plugins)this._pluginStateMap.set(r,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let r=g(e);if(r.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const n=await t.preloadResponse;if(n)return n}const a=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const n of this.iterateCallbacks("requestWillFetch"))r=await n({request:r.clone(),event:t})}catch(n){if(n instanceof Error)throw new d("plugin-error-request-will-fetch",{thrownErrorMessage:n.message})}const c=r.clone();try{let n;n=await fetch(r,r.mode==="navigate"?void 0:this._strategy.fetchOptions);for(const o of this.iterateCallbacks("fetchDidSucceed"))n=await o({event:t,request:c,response:n});return n}catch(n){throw a&&await this.runCallbacks("fetchDidFail",{error:n,event:t,originalRequest:a.clone(),request:c.clone()}),n}}async fetchAndCachePut(e){const t=await this.fetch(e),r=t.clone();return this.waitUntil(this.cachePut(e,r)),t}async cacheMatch(e){const t=g(e);let r;const{cacheName:a,matchOptions:c}=this._strategy,n=await this.getCacheKey(t,"read"),o=Object.assign(Object.assign({},c),{cacheName:a});r=await caches.match(n,o);for(const l of this.iterateCallbacks("cachedResponseWillBeUsed"))r=await l({cacheName:a,matchOptions:c,cachedResponse:r,request:n,event:this.event})||void 0;return r}async cachePut(e,t){const r=g(e);await S(0);const a=await this.getCacheKey(r,"write");if(!t)throw new d("cache-put-with-no-response",{url:P(a.url)});const c=await this._ensureResponseSafeToCache(t);if(!c)return!1;const{cacheName:n,matchOptions:o}=this._strategy,l=await self.caches.open(n),h=this.hasCallback("cacheDidUpdate"),u=h?await U(l,a.clone(),["__WB_REVISION__"],o):null;try{await l.put(a,h?c.clone():c)}catch(i){if(i instanceof Error)throw i.name==="QuotaExceededError"&&await T(),i}for(const i of this.iterateCallbacks("cacheDidUpdate"))await i({cacheName:n,oldResponse:u,newResponse:c.clone(),request:a,event:this.event});return!0}async getCacheKey(e,t){const r=`${e.url} | ${t}`;if(!this._cacheKeys[r]){let a=e;for(const c of this.iterateCallbacks("cacheKeyWillBeUsed"))a=g(await c({mode:t,request:a,event:this.event,params:this.params}));this._cacheKeys[r]=a}return this._cacheKeys[r]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const r of this.iterateCallbacks(e))await r(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const r=this._pluginStateMap.get(t);yield c=>{const n=Object.assign(Object.assign({},c),{state:r});return t[e](n)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,r=!1;for(const a of this.iterateCallbacks("cacheWillUpdate"))if(t=await a({request:this.request,response:t,event:this.event})||void 0,r=!0,!t)break;return r||t&&t.status!==200&&(t=void 0),t}}class B{constructor(e={}){this.cacheName=H.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,r=typeof e.request=="string"?new Request(e.request):e.request,a="params"in e?e.params:void 0,c=new V(this,{event:t,request:r,params:a}),n=this._getResponse(c,r,t),o=this._awaitComplete(n,c,r,t);return[n,o]}async _getResponse(e,t,r){await e.runCallbacks("handlerWillStart",{event:r,request:t});let a;try{if(a=await this._handle(t,e),!a||a.type==="error")throw new d("no-response",{url:t.url})}catch(c){if(c instanceof Error){for(const n of e.iterateCallbacks("handlerDidError"))if(a=await n({error:c,event:r,request:t}),a)break}if(!a)throw c}for(const c of e.iterateCallbacks("handlerWillRespond"))a=await c({event:r,request:t,response:a});return a}async _awaitComplete(e,t,r,a){let c,n;try{c=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:a,request:r,response:c}),await t.doneWaiting()}catch(o){o instanceof Error&&(n=o)}if(await t.runCallbacks("handlerDidComplete",{event:a,request:r,response:c,error:n}),t.destroy(),n)throw n}}class G extends B{constructor(e={}){super(e),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,t){let r,a;try{const c=[t.fetch(e)];if(this._networkTimeoutSeconds){const n=S(this._networkTimeoutSeconds*1e3);c.push(n)}if(a=await Promise.race(c),!a)throw new Error(`Timed out the network response after ${this._networkTimeoutSeconds} seconds.`)}catch(c){c instanceof Error&&(r=c)}if(!a)throw new d("no-response",{url:e.url,error:r});return a}}class Q{constructor(e){w(this,"mode","all");w(this,"rejectNotOk");w(this,"rejectOffline");e.mode&&(this.mode=e.mode),this.rejectNotOk="rejectNotOk"in e?e.rejectNotOk:!0,this.rejectOffline="rejectOffline"in e?e.rejectOffline:!1}async fetchDidSucceed(e){if(this.mode==="production"||this.mode==="all"){if(this.rejectNotOk&&!e.response.ok&&e.response.type!=="opaque")throw new Error(`${e.response.status} ${e.response.statusText}`);if(this.rejectOffline&&!self.navigator.onLine)throw new Error("Failed to fetch: offline");return e.response}else return e.response}}const z="cache-html",J="cache-css",X="cache-all",Y="remove-cache",Z="my-cache-storage";function O(s){return new URL(s,typeof window>"u"?self.location.origin:window.location.origin)}async function k(s){const e=s.cacheName||Z,t=new Set,r=s.resources.filter(u=>{const i=O(u),b=(s.includes?s.includes.some(j=>j.test(i.pathname)):!0)&&!t.has(i.toString());return b&&t.add(i.toString()),b}),a=await Promise.all(r.map(async u=>!await caches.match(u))),c=r.filter((u,i)=>a[i]),n=c.length===0;let o=!1,l=!1,h="Dont worry, it's already in cache";if(!n)try{await(await caches.open(e)).addAll(c.map(i=>O(i).toString())),o=!0,h="Cached successfully!"}catch(u){l=!0,u instanceof Error?h=u.message:h="Unknown error"}return{hasSucceeded:o,hasFailed:l,details:h}}const m="pwa-cache-storage",ee=[],te=structuredClone([{"revision":"ab43c9c761405671a54811bb028e066f","url":"App.css"},{"revision":"15d586365b04f1bba50134e5a6155707","url":"index.css"},{"revision":"ab013a9ae8ea4fe77006df2e0e4163e4","url":"pwa-logo.svg"},{"revision":"2fc925a4-e3b2-4983-aefb-85692b46f358","url":"index.html"},{"revision":null,"url":"https://fonts.gstatic.com/s/montserrat/v29/JTUSjIg1_i6t8kCHKm459Wlhyw.woff2"},{"revision":"40c1990bf5e88ee5878678d6f2c357b4","url":"manifest.webmanifest"}]);I(new G({plugins:[new Q({rejectOffline:!0}),{async requestWillFetch(s){const e=new URL(s.request.url);return ee.push(e.origin===self.location.origin?e.href.replace(e.origin,"").slice(1):e.href),s.request}}]}));$(async s=>{const e=s.request.destination==="document"?await caches.match("index.html"):await caches.match(s.request.url);return e||Response.error()});F();self.addEventListener("message",async s=>{const e=te.map(t=>t.url);switch(s.data.type){case z:{const t=await k({resources:e,includes:[/^[^.]+$|.+\.(?:ts|tsx|js|jsx|mjs)$/],cacheName:m});s.ports[0].postMessage(t);break}case J:{const t=await k({resources:e,includes:[/\.(?:css|scss)$/],cacheName:m});s.ports[0].postMessage(t);break}case X:{const t=await k({resources:e,cacheName:m});s.ports[0].postMessage(t);break}case Y:{const t=await caches.delete(m);s.ports[0].postMessage({hasSucceeded:t,hasFailed:!t,details:t?"Cache cleared successfully":"Cache not found"});break}}});self.addEventListener("install",()=>{console.log("[SW] Service worker installed!")});
